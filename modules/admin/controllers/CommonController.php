<?php/** * Created by PhpStorm. * User: wei.wang * Date: 2017/6/20 * Time: 17:27 */namespace app\modules\admin\controllers;use app\common\helpers\StringFunc;use app\common\helpers\Xxtea;use app\common\widgets\Auth;use yii;use yii\web\Controller;use yii\web\Request;class CommonController extends Controller{    protected $_config= array();    public $layout = false;    public $clientInfo = array();    public function init()    {        //获取yii配置        $this->_config= Yii::$app->params;        //客户端信息       // $this->__getClientBaseInfo();        // 获取当前用户ID        define('UID', $this->is_login());        if (!UID) {// 还没登录 跳转到登录页面           //$this->redirect(array('Admin/Public/Login'));        }        // 是否是超级管理员 // 检查IP地址访问后台        define('IS_ROOT', $this->is_administrator());        if (!IS_ROOT && $this->_config['admin_allow_ip']) {            $client_ip = Yii::$app->request->userIP;            if (!in_array($client_ip, explode(',', $this->_config['admin_allow_ip']))) {                //$this->error('403:禁止访问');               // $this->redirect(array('Admin/Public/Login'));            }        }        // 检测访问权限        // $access =   $this->accessControl();        //检测非动态权限//        $rule = strtolower(MODULE_NAME . '/' . CONTROLLER_NAME . '/' . ACTION_NAME);//        if (!$this->checkRule($rule, array('in', '1,2'))) {//            $this->error('未授权访问!');//        }//        //后台左侧导航//        $this->__menus__= $this->getMenus();    }    /**     * 检测用户是否登录     * @return integer 0-未登录，大于0-当前登录用户ID     * @author     */    protected function is_login()    {        $session = Yii::$app->session;        $user = $session['user_info'];        if (!isset($user) || empty($user)) {            return 0;        } else {            return $session['user_info_sign'] == $this->data_auth_sign($user) ? $user['uid'] : 0;        }    }    /**     * 检测当前用户是否为管理员     * @return boolean true-管理员，false-非管理员     * @author     */    protected function is_administrator($uid = null)    {        $uid = is_null($uid) ? $this->is_login() : $uid;        return $uid && in_array(intval($uid), $this->_config['administrator']);    }    /**     * 数据签名认证     * @param  array $data 被认证的数据     * @return string       签名     * @author     */    protected function data_auth_sign($data)    {        //数据类型检测        if (!is_array($data)) {            $data = (array)$data;        }        ksort($data); //排序        $code = http_build_query($data); //url编码并生成query字符串        $sign = sha1($code); //生成签名        return $sign;    }    /**     * 权限检测     * @param string $rule 检测的规则     * @param string $mode check模式     * @return boolean     */    final protected function checkRule($rule, $type = 1, $mode = 'url')    {        if (IS_ROOT) {            return true;//管理员允许访问任何页面        }        static $Auth = null;        if (!$Auth) {            $_config= $this->_config;            $Auth = new Auth($_config);        }        if (!$Auth->check($rule, UID, $type, $mode)) {            return false;        }        return true;    }    /**     * 获取控制器菜单数组,二级菜单元素位于一级菜单的'child'元素中     *     */    final public function getMenus($controller='')    {        $controller = !empty($controller)?$controller:Yii::$app->controller->id;        if (empty($menus)) {            // 获取主菜单            $where['pid'] = 0;            $menus = M('auth_rule')->where($where)->order('sort asc')->select();            //高亮主菜单            $current = M('auth_rule')->where("name like '%{$controller}/" . Yii::$app->controller->action->id . "%'")->field('id')->find();            // 判断主菜单权限            foreach ($menus as $k => $v) {                $menus[$k]['check'] = $v['id'] == $current['id'] ? 1 : 0;                // 判断主菜单权限                if (!IS_ROOT && !$this->checkRule($v['name'], 1, null)) {                    unset($menus[$k]);                    continue;//继续循环                }            }            $menus_parent = D('menu')->where(array('status'=>1))->order(array('sort'=>'asc'))->select();            foreach ($menus_parent as $k => $v) {                foreach($menus as $key=>$val){                    if($v['id']==$val['menu_pid']){                        $menus_parent[$k]['child'][] = $val;                    }                }            }        }        return $menus_parent;    }    /**     * 获取get数据     * @param string $str  key字符串     * @return mixed     */    public function getGET($str='',$def_v = null)    {        $param_str = isset($_GET['_get']) ? trim($_GET['_get']) : '';        unset($_GET['_get']);        $param_arr = $param_str != '' ? explode('/', $param_str) : array();        $param = $key_arr = $val_arr = array();        foreach ($param_arr as $k => $v) {            if($v===''){                continue;            }            if ($k % 2 == 0) {                $key_arr[] = $v;            } else {                $val_arr[] = $v;            }        }        foreach ($key_arr as $key => $val) {            $param[$val] = $val_arr[$key];        }        $_GET = $_GET+$param;        if($str===''){            return $_GET;        }else if(isset($_GET[$str])){            return $_GET[$str];        }        return $def_v;    }    /**     * 获取用户ID     * @return mixed     */    public function Uid()    {        $token = isset( $this->clientInfo['token']) && !empty($this->clientInfo['token']) ? trim($this->clientInfo['token']) : '';        if (!$token) {            return 0;        }        $token_str = $this->__decryptToken($token);        list($uid, $rand) = explode('|', $token_str);        return $uid;    }    /**     * 获取客户端基础信息     *     * @author: wei.wang     */    private function __getClientBaseInfo()    {        if (!function_exists('getallheaders')) {            function getallheaders()            {                $headers = '';                foreach ($_SERVER as $name => $value) {                    if (substr($name, 0, 5) == 'HTTP_') {                        $headers[str_replace(' ', '-', strtolower(str_replace('_', ' ', substr($name, 5))))] = $value;                    }                }                return $headers;            }            $headers = getallheaders();        } else {            $headers = getallheaders();        }        $this->clientInfo = array(            'platform' => $headers['platform'],            'carrier' => $headers['carrier'],            'osversion' => $headers['osversion'],            'mac' => $headers['mac'],            'udid' => $headers['udid'],            'clientversion' => $headers['clientversion'],            'model' => $headers['model'],            'token' => $headers['token'],            'timestamp' => $headers['timestamp']        );    }    /**     * @param $str   解密字符串     * @param $key   密钥     * @return string     * @author wei.wang     */    public function __xxteaDecrypt($str, $key)    {        return Xxtea::decrypt($str, $key);    }    /**     * 数据解密     * @param $arr 解密数据     * @return array|null|string     */    protected function _decryptRequest($arr)    {        $result = null;        $dataKey = Yii::$app->params['dataKey'];        if (is_array($arr)) {            foreach ($arr as $value) {                $result[] = $this->__xxteaDecrypt($value, $dataKey);            }            return $result;        } else {            return $this->__xxteaDecrypt($arr, $dataKey);        }    }    /**     * token解密     * @param $token token     * @return string     */    protected function __decryptToken($token)    {        $tokenKey = Yii::$app->params['tokenKey'];        return $this->__xxteaDecrypt(pack("H*", $token), $tokenKey);    }    /**     * 创建token     * @param $uid     * @return string     */    public function _createToken($uid)    {        $tokenKey = Yii::$app->params['tokenKey'];        $rand = StringFunc::randString(6);        $token = bin2hex(Xxtea::encrypt($uid . '|' . $rand, $tokenKey,5));        return $token;    }}