<?php/** * Created by PhpStorm. * User: wei.wang * Date: 2017/6/20 * Time: 17:27 */namespace app\modules\admin\controllers;use app\common\helpers\String;use app\common\helpers\Xxtea;use yii;use yii\web\Controller;use yii\web\Request;class CommonController extends Controller{    public $layout = false;    public function init()    {        $this->__getClientBaseInfo();    }    /**     * 获取get数据     * @param string $str  key字符串     * @return mixed     */    public function getGET($str='',$def_v = null)    {        $param_str = isset($_GET['_get']) ? trim($_GET['_get']) : '';        unset($_GET['_get']);        $param_arr = $param_str != '' ? explode('/', $param_str) : array();        $param = $key_arr = $val_arr = array();        foreach ($param_arr as $k => $v) {            if($v===''){                continue;            }            if ($k % 2 == 0) {                $key_arr[] = $v;            } else {                $val_arr[] = $v;            }        }        foreach ($key_arr as $key => $val) {            $param[$val] = $val_arr[$key];        }        $_GET = $_GET+$param;        if($str===''){            return $_GET;        }else if(isset($_GET[$str])){            return $_GET[$str];        }        return $def_v;    }    /**     * 获取用户ID     * @return mixed     */    public function Uid()    {        $token = isset( $this->clientInfo['token']) && !empty($this->clientInfo['token']) ? trim($this->clientInfo['token']) : '';        if (!$token) {            return 0;        }        $token_str = $this->__decryptToken($token);        list($uid, $rand) = explode('|', $token_str);        return $uid;    }    /**     * 获取客户端基础信息     *     * @author: wei.wang     */    private function __getClientBaseInfo()    {        if (!function_exists('getallheaders')) {            function getallheaders()            {                $headers = '';                foreach ($_SERVER as $name => $value) {                    if (substr($name, 0, 5) == 'HTTP_') {                        $headers[str_replace(' ', '-', strtolower(str_replace('_', ' ', substr($name, 5))))] = $value;                    }                }                return $headers;            }            $headers = getallheaders();        } else {            $headers = getallheaders();        }        $this->clientInfo = array(            'platform' => $headers['platform'],            'carrier' => $headers['carrier'],            'osversion' => $headers['osversion'],            'mac' => $headers['mac'],            'udid' => $headers['udid'],            'clientversion' => $headers['clientversion'],            'model' => $headers['model'],            'token' => $headers['token'],            'timestamp' => $headers['timestamp']        );    }    /**     * @param $str   解密字符串     * @param $key   密钥     * @return string     * @author wei.wang     */    public function __xxteaDecrypt($str, $key)    {        return Xxtea::decrypt($str, $key);    }    /**     * 数据解密     * @param $arr 解密数据     * @return array|null|string     */    protected function _decryptRequest($arr)    {        $result = null;        $dataKey = Yii::$app->params['dataKey'];        if (is_array($arr)) {            foreach ($arr as $value) {                $result[] = $this->__xxteaDecrypt($value, $dataKey);            }            return $result;        } else {            return $this->__xxteaDecrypt($arr, $dataKey);        }    }    /**     * token解密     * @param $token token     * @return string     */    protected function __decryptToken($token)    {        $tokenKey = Yii::$app->params['tokenKey'];        return $this->__xxteaDecrypt(pack("H*", $token), $tokenKey);    }    /**     * 创建token     * @param $uid     * @return string     */    public function _createToken($uid)    {        $tokenKey = Yii::$app->params['tokenKey'];        $rand = String::randString(6);        $token = bin2hex(Xxtea::encrypt($uid . '|' . $rand, $tokenKey,5));        return $token;    }}